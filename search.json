[{"title":"js语法","url":"https://sixcx.github.io/2017/02/14/js-grammar/","content":"<h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h2><p>js程序执行单位为行，一行一行的执行，一般来说，一行就是一条语句。<br>语句(statement)是为了完成某种任务而进行的操作。比如：</p>\n<pre><code>var a = 1 + 1;\n</code></pre><p>1 + 1 为表达式(expression),为了得到返回值的计算式。语句与表达式区别为:语句一般不需要返回值，表达式一定会返回一个值。<br>js语言中预期为值的地方都可以使用表达式，一条语句可以包含多个表达式。语句已分号结尾，一个分号就表示语句结束，分号前面可以没有内容，js引擎视为空语句。表达式不需要分号结尾，加分号则视为语句，无任何意义。</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>变量是对值的引用  <code>var a = 1</code><br>先声明a，再将两个数之间建立引用关系，就是将1赋值给a。var表示变量声明命令，通知解释引擎，创建一个变量a。实际上是:</p>\n<pre><code>var a;\na = 1;\n</code></pre><p>只是声明变量不赋值，该变量的值是undefined.不写var也是有效的，不过会创建全局变量。</p>\n<blockquote>\n<p>var a = 1和a = 1,这两条语句效果完全相同，严格来说本质不完全相同，只有var a= 1才是声明变量。a = 1相当于window[“a”] = 1.对象的属性可删除，所以可以delete a.</p>\n</blockquote>\n<p>变量没有声明直接使用，就回报变量未定义。变量的类型没有限制，可以赋予各种类型的值，若声明一个存在的变量，第二次声明无效，赋值后会覆盖前面的值。</p>\n<h3 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h3><p>js引擎工作方式是先解析代码，获取所有被声明的变量，再一行一行的运行。结果就是所有变量的声明语句都会被提升到代码的头部，即为变量提升(hoisting)。比如:</p>\n<pre><code>console.log(a);\nvar a = 1;\n</code></pre><p>实际上:</p>\n<pre><code>var a;\nconsole.log(a);\na = 1;\n</code></pre><p>显示为undefined,不是用var声明的变量不会发生变量提升。</p>\n<blockquote>\n<p>注：js有四种在作用域内获得提升的途径(优先级)：<br>1.语言定义的声明，如this,arguments，不能在作用域内重新定义this<br>2.形式参数<br>3.函数声明<br>4.var声明的变量</p>\n</blockquote>\n<h2 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h2><p>用来识别具体对象的一个名称，最常见为变量名，以及函数名。<br>命名规则:第一个字符可以是任意Unicode字母，$和_,第二个及以后的还可以用0-9<br>中文可以用作标识符，</p>\n<blockquote>\n<p>js有一些保留字不能用作标识符:arguments、break、case、catch、class、const、continue、debugger、default、delete、do、else、enum、eval、export、extends、false、finally、for、function、if、implements、import、in、instanceof、interface、let、new、null、package、private、protected、public、return、static、super、switch、this、throw、true、try、typeof、var、void、while、with、yield<br>Infinity NaN undefined虽然不是保留字，但因为具有特别含义，也不用作标识</p>\n</blockquote>\n","categories":[],"tags":["js"]},{"title":"hexo搭建github博客的学习","url":"https://sixcx.github.io/2017/02/14/hexo-learn/","content":"<h4 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语\"></a>导语</h4><blockquote>\n<p>使用github pages服务器搭建博客的好处:<br>1.静态文件，访问速度快<br>2.免费，无需花钱就能搭建一个自己的博客<br>3.数据安全，基于github<br>4.只需要写自己的文章上传即可<br>5.可以随意绑定自己的域名</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>自己的github账号</li>\n<li>安装nodejs、npm，及其相关知识</li>\n<li>安装git</li>\n</ul>\n<h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2><p>新建用户名为 username.github.io的仓库,username就是你的用户名，也必须是你的用户名，访问地址就是 <a href=\"http://username.github.io\" target=\"_blank\" rel=\"external\">http://username.github.io</a><br>每个账号只能创建一个这样的可以直接访问的仓库，以后你的代码都放在这个仓库 </p>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><p>显然，不绑定也是可以的，如果你想有个性一点，就去注册一个域名。<br>配置域名常见两种方式，CNAME和A记录，CNAME填域名，A记录填IP，不带www方式的只能采用A记录，先ping一下username.github.io的IP，到你的域名DNS设置页将A记录指向这个IP，将CNAME指向username.github.io，保证无论是否有www都能访问。<br>到你项目的根目录建一个CNAME文件，填写你的域名，就可以访问这个域名，原来的默认并没有失效，只是自动调转到新域名</p>\n<h2 id=\"配置SSH-key\"><a href=\"#配置SSH-key\" class=\"headerlink\" title=\"配置SSH key\"></a>配置SSH key</h2><p>解决服务器与本机的连接问题，<br>打开git bash执行:</p>\n<pre><code>cd ~/.ssh #检查本机已存在的ssh密钥\n</code></pre><p>提示: No such file of directory说明是第一次使用<br>执行:</p>\n<pre><code>ssh-keygen -t rsa -C &quot;你的邮件地址&quot;\n</code></pre><p>3次回车，会生成在用户目录下，打开.ssh\\id_rsa.pub，复制内容，在你的github主页个人设置-&gt;SSH ang GPG keys-&gt;New SSH key，将内容复制进去，title随意，保存<br>执行以下命令来测试是否成功:</p>\n<pre><code>ssh -T git@github.com\n</code></pre><p>若提示Are you sure yo  want to continue connecting(yes/no)?，输入yes，成功</p>\n<h2 id=\"使用hexo\"><a href=\"#使用hexo\" class=\"headerlink\" title=\"使用hexo\"></a>使用hexo</h2><p>简介:hexo是一个基于Github Pages的博客发布工具</p>\n<p>官网：<a href=\"http://hexo.io\" target=\"_blank\" rel=\"external\">http://hexo.io</a></p>\n<p>github: <a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"external\">https://github.com/hexojs/hexo</a><br>安装：</p>\n<pre><code>npm install -g hexo\n</code></pre><p>初始化：新建一个文件夹，作为存放代码的地方</p>\n<pre><code>cd 你的文件夹\nhexo init\n</code></pre><p>hexo会自动加载文件到此目录<br>使用以下命令生成启动:</p>\n<pre><code>hexo g #生成\nhexo s #启动服务\n</code></pre><p>执行后会在目录下生成public文件夹生成相关html文件，用于提交到github<br>打开localhost:4000就会看到内容</p>\n<p>修改主题：网上有很多，这里使用hexo-theme-yilia<br>下载:</p>\n<pre><code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n</code></pre><p>将主题放入theme文件夹下的yilia，修改根目录_config.yml的theme: landscape改为theme: yilia，执行hexo g 重新生成，遇到问题可以执行hexo clean来清理，再重新生成发布。</p>\n<p>上传到github<br>将_config_yml中的deploy修改:</p>\n<pre><code>deploy:\n    type: git\n    repository: git@github.com:username/username.github.io.git\n    branch: master\n</code></pre><p>安装下列插件:</p>\n<pre><code>npm install hexo-deploy-git --save\n</code></pre><p>使用git bash 输入 hexo d 将代码提交到github</p>\n<p>可以将CNAME、README.md等文件放入source，在_config.yml中配置skip_render: [README.md]</p>\n<p>缩写:</p>\n<pre><code>hexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy\n</code></pre><p>组合命令:</p>\n<pre><code>hexo s -g #生成并本地预览\nhexo d -g #生成并上传\n</code></pre><h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><p>到hexo根目录执行:</p>\n<pre><code>hexo new &apos;name&apos;\n</code></pre><p>hexo会帮我们在_posts下面生成相关md文件<br>打开此文件就可以开始写博客</p>\n","categories":[],"tags":["github","hexo"]},{"title":"category","url":"https://sixcx.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"https://sixcx.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://sixcx.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://sixcx.github.io/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://sixcx.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://sixcx.github.io/tag/index.html","content":"","categories":[],"tags":[]}]